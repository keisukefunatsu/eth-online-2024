/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AttesterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "paymentAddress"
      | "paymentAndAttest"
      | "schemaId"
      | "spContract"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Debug" | "DebugString" | "DebugUint256"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "paymentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentAndAttest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "schemaId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "paymentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentAndAttest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schemaId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spContract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace DebugEvent {
  export type InputTuple = [message: string];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugStringEvent {
  export type InputTuple = [value: string];
  export type OutputTuple = [value: string];
  export interface OutputObject {
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugUint256Event {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Attester extends BaseContract {
  connect(runner?: ContractRunner | null): Attester;
  waitForDeployment(): Promise<this>;

  interface: AttesterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  paymentAddress: TypedContractMethod<[], [string], "view">;

  paymentAndAttest: TypedContractMethod<
    [attestationId: BigNumberish],
    [[bigint, string]],
    "nonpayable"
  >;

  schemaId: TypedContractMethod<[], [bigint], "view">;

  spContract: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "paymentAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentAndAttest"
  ): TypedContractMethod<
    [attestationId: BigNumberish],
    [[bigint, string]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "schemaId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "spContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Debug"
  ): TypedContractEvent<
    DebugEvent.InputTuple,
    DebugEvent.OutputTuple,
    DebugEvent.OutputObject
  >;
  getEvent(
    key: "DebugString"
  ): TypedContractEvent<
    DebugStringEvent.InputTuple,
    DebugStringEvent.OutputTuple,
    DebugStringEvent.OutputObject
  >;
  getEvent(
    key: "DebugUint256"
  ): TypedContractEvent<
    DebugUint256Event.InputTuple,
    DebugUint256Event.OutputTuple,
    DebugUint256Event.OutputObject
  >;

  filters: {
    "Debug(string)": TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;
    Debug: TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;

    "DebugString(string)": TypedContractEvent<
      DebugStringEvent.InputTuple,
      DebugStringEvent.OutputTuple,
      DebugStringEvent.OutputObject
    >;
    DebugString: TypedContractEvent<
      DebugStringEvent.InputTuple,
      DebugStringEvent.OutputTuple,
      DebugStringEvent.OutputObject
    >;

    "DebugUint256(uint256)": TypedContractEvent<
      DebugUint256Event.InputTuple,
      DebugUint256Event.OutputTuple,
      DebugUint256Event.OutputObject
    >;
    DebugUint256: TypedContractEvent<
      DebugUint256Event.InputTuple,
      DebugUint256Event.OutputTuple,
      DebugUint256Event.OutputObject
    >;
  };
}
