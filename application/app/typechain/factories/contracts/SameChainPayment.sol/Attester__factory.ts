/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Attester,
  AttesterInterface,
} from "../../../contracts/SameChainPayment.sol/Attester";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_spContractAddress",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "_schemaId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "string",
        name: "_indexingKey",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "StringsInsufficientHexLength",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Debug",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "DebugString",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "DebugUint256",
    type: "event",
  },
  {
    inputs: [],
    name: "indexingKey",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paymentAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "attestationId",
        type: "uint64",
      },
    ],
    name: "paymentAndAttest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "schemaId",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "spContract",
    outputs: [
      {
        internalType: "contract ISP",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060409080825234620003db5750620014d580380380620000218162000428565b92833981016080828203126200038c576200003c826200044e565b602083810151909390926001600160401b03929083851685036200038757620000678784016200044e565b9260608101519085821162000338570194601f92828488011215620002e05786518681116200026157601f1997620000a58287018a168b0162000428565b948286528a83830101116200028c57899060005b8381106200027757505060009185010181905280546001600160e01b0319166001600160a01b039283161760a09390931b600160a01b600160e01b031692909217909155600180546001600160a01b031916949091169390931783558051938411620002615760039586548481811c9116801562000256575b828210146200024057838111620001f5575b50809285116001146200018d57508394509083929160009462000181575b50501b9160001990841b1c19161790555b516110719081620004648239f35b01519250388062000162565b9294849081168760005284600020946000905b88838310620001da5750505010620001c1575b505050811b01905562000173565b015160001983861b60f8161c19169055388080620001b3565b858701518855909601959485019487935090810190620001a0565b87600052816000208480880160051c82019284891062000236575b0160051c019085905b8281106200022957505062000144565b6000815501859062000219565b9250819262000210565b634e487b7160e01b600052602260045260246000fd5b90607f169062000132565b634e487b7160e01b600052604160045260246000fd5b8181018301518782018401528b9201620000b9565b8a5162461bcd60e51b8152600481018b9052602760248201527f414249206465636f64696e673a20696e76616c69642062797465206172726179604482015266040d8cadccee8d60cb1b6064820152608490fd5b885162461bcd60e51b815260048101899052602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a1c9c985e481bd9999cd95d60aa1b6064820152608490fd5b885162461bcd60e51b815260048101899052602260248201527f414249206465636f64696e673a20696e76616c6964207475706c65206f666673604482015261195d60f21b6064820152608490fd5b600080fd5b825162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b62461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fd5b6040519190601f01601f191682016001600160401b038111838210176200026157604052565b51906001600160a01b0382168203620003875756fe60806040526004361015610071575b60405162461bcd60e51b815260206004820152603560248201527f436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b206044820152746e6f7220726563656976652066756e6374696f6e7360581b6064820152608490fd5b60003560e01c8063075b1a0914610c735780633f19119b14610224578063633423be146101fb578063667578cf146101145780637ce343b5146100eb5763fc0c546a0361000e57346100e65760003660031901126100e1576001546040516001600160a01b039091168152602090f35b610ced565b610c9d565b346100e65760003660031901126100e1576000546040516001600160a01b039091168152602090f35b346100e65760003660031901126100e15760405160035460008261013783610dd5565b91828252602093600190856001821691826000146101db57505060011461017e575b5061016692500383610e46565b61017a604051928284938452830190610db0565b0390f35b84915060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b906000915b8583106101c3575050610166935082010185610159565b805483890185015287945086939092019181016101ac565b60ff19168582015261016695151560051b85010192508791506101599050565b346100e65760003660031901126100e1576002546040516001600160a01b039091168152602090f35b346100e65760203660031901126100e1576004356001600160401b0381168091036109d3576000546001600160a01b031690813b156107905760009060246040518094819362c44a5160e71b835260048301525afa8015610738576000906109dd575b610120915001518051810190608081602084019303126100e15760208101519060408101516001600160401b0381116109d8578360206102c992840101610f85565b9260608201516001600160401b0381116109d85760809160206102ee92850101610f85565b9101516001600160a01b038116908190036109d357600280546001600160a01b0319169190911790556001546001600160a01b0316803b15610790576040516370a0823160e01b815230600482015290602082602481845afa9182156107385760009261099f575b50803b156107905760206000916064604051809481936323b872dd60e01b83523360048401523060248401528960448401525af1801561073857610966575b506001546001600160a01b031690813b15610790576020602492604051938480926370a0823160e01b82523060048301525afa91821561073857600092610932575b5081039081116108845782116108d75761042861041a91604051928391604060208401526104086060840188610db0565b838103601f1901604085015290610db0565b03601f198101835282610e46565b6040519061043582610e2b565b6001825260005b602081106108c657506040513360208201526020815261045b81610e2b565b6104648361102e565b5261046e8261102e565b50600054906040519261048084610e0f565b6001600160401b038360a01c168452600060208501526000604085015260006060850152306080850152600060a0850152600060c0850152600060e085015261010084015261012083015233604051908160608101106001600160401b036060840111176108b05760608201604052602a8252604036602084013781511561089a576030602083015381516001101561089a576078602183015360295b6001811161083b575061081c57604051906105418151809260208086019101610d8d565b8160006003549261055184610dd5565b93600181169081156107f95750600114610795575b5061057a925003601f198101835282610e46565b6001600160a01b0382163b15610790576040519263b82916cb60e01b8452608060048501526001600160401b0381511660848501526001600160401b0360208201511660a48501526001600160401b0360408201511660c48501526001600160401b0360608201511660e485015260018060a01b036080820151166101048501526001600160401b0360a08201511661012485015260c0810151600481101561077a5791849261014484959395015260e08401511515610164840152610100840151936101406101848501528451806101c48601526101e4906020828701928260051b8801019701916000905b828210610744575050505060406106ab85936106996020986101206000960151608319888303016101a4890152610db0565b85810360031901602487015290610db0565b83810360031981016044860152838252601c8101606486015290870183905201926001600160a01b03165af18015610738576106ff575b5061017a6040519283928352604060208401526040830190610db0565b6020813d602011610730575b8161071860209383610e46565b810103126100e15761072990610f0b565b50826106e2565b3d915061070b565b6040513d6000823e3d90fd5b91939496509194966020806107666001936101e3198d82030186528951610db0565b970192019201889694939192979597610667565b634e487b7160e01b600052602160045260246000fd5b610e67565b905060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6000905b8482106107db57505061057a926020918301010188610566565b60209192935080600191548385878a010101520191018492916107c1565b6020935061057a95915060ff191683838601015280151502908301010188610566565b60405163e22e27eb60e01b815233600482015260146024820152604490fd5b906010600f8216101561089a57825182101561089a576f181899199a1a9b1b9c1cb0b131b232b360811b600f82161a8383016020015360041c908015610884576000190161051d565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80606060208093860101520161043c565b60405162461bcd60e51b815260206004820152602d60248201527f416d6f756e74206d7573742062652067726561746572207468616e206f72206560448201526c7175616c20746f20707269636560981b6064820152608490fd5b9091506020813d60201161095e575b8161094e60209383610e46565b810103126100e1575190856103d7565b3d9150610941565b6020813d602011610997575b8161097f60209383610e46565b810103126100e15761099090610f1f565b5084610395565b3d9150610972565b9091506020813d6020116109cb575b816109bb60209383610e46565b810103126100e157519085610356565b3d91506109ae565b600080fd5b610d3d565b503d806000833e6109ee8183610e46565b60208282810103126100e1578151916001600160401b0383116109d8576101408382018383010312610c225760405191610a2783610e0f565b610a32848301610f0b565b8352610a42602085840101610f0b565b6020840152610a55604085840101610f0b565b6040840152610a68606085840101610f0b565b6060840152818401608001516001600160a01b03811681036109d3576080840152610a9760a085840101610f0b565b60a084015260c0848301015160048110156109d35760c0840152610abf60e085840101610f1f565b60e084015261010084830101516001600160401b038111610b8557818301601f8287860101011215610bc457808584010151906001600160401b0382116108b0578160051b9060405192610b166020840185610e46565b835260208301848601602084848b8a0101010111610bc9576020828988010101905b602084848b8a010101018210610b8a5750505050610100840152610120918285820101516001600160401b038111610b855761012095610b7c938301920101610f85565b90820152610287565b610eba565b8151906001600160401b038211610bc4576020809291610bb78a8380958f8a908e85019401010101610f85565b8152019201919050610b38565b610f2c565b60405162461bcd60e51b815260206004820152602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a727261792073747269646560a81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f414249206465636f64696e673a20737472756374206461746120746f6f2073686044820152621bdc9d60ea1b6064820152608490fd5b34610c9d5760003660031901126100e15760206001600160401b0360005460a01c16604051908152f35b60405162461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a20696e76616c6964207475706c65206f666673604482015261195d60f21b6064820152608490fd5b60005b838110610da05750506000910152565b8181015183820152602001610d90565b90602091610dc981518092818552858086019101610d8d565b601f01601f1916010190565b90600182811c92168015610e05575b6020831014610def57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610de4565b61014081019081106001600160401b038211176108b057604052565b604081019081106001600160401b038211176108b057604052565b90601f801991011681019081106001600160401b038211176108b057604052565b60405162461bcd60e51b815260206004820152602560248201527f54617267657420636f6e747261637420646f6573206e6f7420636f6e7461696e60448201526420636f646560d81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f414249206465636f64696e673a20696e76616c696420737472756374206f66666044820152621cd95d60ea1b6064820152608490fd5b51906001600160401b03821682036109d357565b519081151582036109d357565b60405162461bcd60e51b815260206004820152602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a1c9c985e481bd9999cd95d60aa1b6064820152608490fd5b81601f82011215610bc45780516001600160401b0381116108b05760405192610fb8601f8301601f191660200185610e46565b81845260208284010111610fd957610fd69160208085019101610d8d565b90565b60405162461bcd60e51b815260206004820152602760248201527f414249206465636f64696e673a20696e76616c69642062797465206172726179604482015266040d8cadccee8d60cb1b6064820152608490fd5b80511561089a576020019056fea2646970667358221220496f1727027aa7d8d42ffde8e4e45dd74544d46f0ba15c9ed34560c14f18976964736f6c63430008180033";

type AttesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attester__factory extends ContractFactory {
  constructor(...args: AttesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _spContractAddress: AddressLike,
    _schemaId: BigNumberish,
    _token: AddressLike,
    _indexingKey: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _spContractAddress,
      _schemaId,
      _token,
      _indexingKey,
      overrides || {}
    );
  }
  override deploy(
    _spContractAddress: AddressLike,
    _schemaId: BigNumberish,
    _token: AddressLike,
    _indexingKey: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _spContractAddress,
      _schemaId,
      _token,
      _indexingKey,
      overrides || {}
    ) as Promise<
      Attester & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Attester__factory {
    return super.connect(runner) as Attester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttesterInterface {
    return new Interface(_abi) as AttesterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Attester {
    return new Contract(address, _abi, runner) as unknown as Attester;
  }
}
