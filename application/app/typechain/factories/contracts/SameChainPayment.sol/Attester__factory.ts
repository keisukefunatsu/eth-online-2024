/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Attester,
  AttesterInterface,
} from "../../../contracts/SameChainPayment.sol/Attester";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_spContractAddress",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "_schemaId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "StringsInsufficientHexLength",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Debug",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "DebugString",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "DebugUint256",
    type: "event",
  },
  {
    inputs: [],
    name: "paymentAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "attestationId",
        type: "uint64",
      },
    ],
    name: "paymentAndAttest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "schemaId",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "spContract",
    outputs: [
      {
        internalType: "contract ISP",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040908082523461012a575080516001600160401b0390601f61103938819003918201601f1916830191848311848410176101145780849260609488528339810103126100c55761005181610177565b90602081015192831683036100c0578361006b9101610177565b600080546001600160e01b0319166001600160a01b039384161760a09490941b600160a01b600160e01b031693909317909255600180546001600160a01b0319169190921617905551610ead908161018c8239f35b600080fd5b825162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b634e487b7160e01b600052604160045260246000fd5b62461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fd5b51906001600160a01b03821682036100c05756fe60806040526004361015610071575b60405162461bcd60e51b815260206004820152603560248201527f436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b206044820152746e6f7220726563656976652066756e6374696f6e7360581b6064820152608490fd5b60003560e01c8063075b1a0914610ae95780633f19119b14610132578063633423be146101095780637ce343b5146100e05763fc0c546a0361000e57346100db5760003660031901126100d6576001546040516001600160a01b039091168152602090f35b610b63565b610b13565b346100db5760003660031901126100d6576000546040516001600160a01b039091168152602090f35b346100db5760003660031901126100d6576002546040516001600160a01b039091168152602090f35b346100db5760203660031901126100d6576004356001600160401b038116809103610849576000546001600160a01b031690813b1561068d5760009060246040518094819362c44a5160e71b835260048301525afa801561063557600090610853575b610120915001518051810190608081602084019303126100d65760208101519060408101516001600160401b03811161084e578360206101d792840101610dc1565b9260608201516001600160401b03811161084e5760809160206101fc92850101610dc1565b9101516001600160a01b0381169081900361084957600280546001600160a01b0319169190911790556001546001600160a01b0316803b1561068d576040516370a0823160e01b815230600482015290602082602481845afa91821561063557600092610815575b50803b1561068d5760206000916064604051809481936323b872dd60e01b83523360048401523060248401528960448401525af18015610635576107dc575b506001546001600160a01b031690813b1561068d576020602492604051938480926370a0823160e01b82523060048301525afa918215610635576000926107a8575b5081039081116106fa57821161074d576040516040602082015261033361030f6060830186610c26565b82610327601f19928383820301604084015286610c26565b03908101835282610cd5565b6040519161034083610cba565b6001835260005b6020811061073c57506040513360208201526020815261036681610cba565b61036f84610e6a565b5261037983610e6a565b50600054916040519361038b85610c9e565b6001600160401b038460a01c168552600060208601526000604086015260006060860152306080860152600060a0860152600060c0860152600060e086015261010085015261012084015233604051908160608101106001600160401b036060840111176107265760608201604052602a825260403660208401378151156107105760306020830153815160011015610710576078602183015360295b600181116106b157506106925760206104739160405193816104538693518092868087019101610c03565b820161046782518093868085019101610c03565b01038084520182610cd5565b6001600160a01b0382163b1561068d576040519263b82916cb60e01b8452608060048501526001600160401b0381511660848501526001600160401b0360208201511660a48501526001600160401b0360408201511660c48501526001600160401b0360608201511660e485015260018060a01b036080820151166101048501526001600160401b0360a08201511661012485015260c081015160048110156106775791849261014484959395015260e08401511515610164840152610100840151936101406101848501528451806101c48601526101e4906020828701928260051b8801019701916000905b828210610641575050505060406105a485936105926020986101206000960151608319888303016101a4890152610c26565b85810360031901602487015290610c26565b83810360031981016044860152838252601c8101606486015290870183905201926001600160a01b03165af18015610635576105fc575b506105f86040519283928352604060208401526040830190610c26565b0390f35b6020813d60201161062d575b8161061560209383610cd5565b810103126100d65761062690610d47565b50826105db565b3d9150610608565b6040513d6000823e3d90fd5b91939496509194966020806106636001936101e3198d82030186528951610c26565b970192019201889694939192979597610560565b634e487b7160e01b600052602160045260246000fd5b610c4b565b60405163e22e27eb60e01b815233600482015260146024820152604490fd5b906010600f82161015610710578251821015610710576f181899199a1a9b1b9c1cb0b131b232b360811b600f82161a8383016020015360041c9080156106fa5760001901610428565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b806060602080938701015201610347565b60405162461bcd60e51b815260206004820152602d60248201527f416d6f756e74206d7573742062652067726561746572207468616e206f72206560448201526c7175616c20746f20707269636560981b6064820152608490fd5b9091506020813d6020116107d4575b816107c460209383610cd5565b810103126100d6575190856102e5565b3d91506107b7565b6020813d60201161080d575b816107f560209383610cd5565b810103126100d65761080690610d5b565b50846102a3565b3d91506107e8565b9091506020813d602011610841575b8161083160209383610cd5565b810103126100d657519085610264565b3d9150610824565b600080fd5b610bb3565b503d806000833e6108648183610cd5565b60208282810103126100d6578151916001600160401b03831161084e576101408382018383010312610a98576040519161089d83610c9e565b6108a8848301610d47565b83526108b8602085840101610d47565b60208401526108cb604085840101610d47565b60408401526108de606085840101610d47565b6060840152818401608001516001600160a01b038116810361084957608084015261090d60a085840101610d47565b60a084015260c0848301015160048110156108495760c084015261093560e085840101610d5b565b60e084015261010084830101516001600160401b0381116109fb57818301601f8287860101011215610a3a57808584010151906001600160401b038211610726578160051b906040519261098c6020840185610cd5565b835260208301848601602084848b8a0101010111610a3f576020828988010101905b602084848b8a010101018210610a005750505050610100840152610120918285820101516001600160401b0381116109fb57610120956109f2938301920101610dc1565b90820152610195565b610cf6565b8151906001600160401b038211610a3a576020809291610a2d8a8380958f8a908e85019401010101610dc1565b81520192019190506109ae565b610d68565b60405162461bcd60e51b815260206004820152602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a727261792073747269646560a81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f414249206465636f64696e673a20737472756374206461746120746f6f2073686044820152621bdc9d60ea1b6064820152608490fd5b34610b135760003660031901126100d65760206001600160401b0360005460a01c16604051908152f35b60405162461bcd60e51b815260206004820152602260248201527f45746865722073656e7420746f206e6f6e2d70617961626c652066756e63746960448201526137b760f11b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a207475706c65206461746120746f6f2073686f6044820152611c9d60f21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f414249206465636f64696e673a20696e76616c6964207475706c65206f666673604482015261195d60f21b6064820152608490fd5b60005b838110610c165750506000910152565b8181015183820152602001610c06565b90602091610c3f81518092818552858086019101610c03565b601f01601f1916010190565b60405162461bcd60e51b815260206004820152602560248201527f54617267657420636f6e747261637420646f6573206e6f7420636f6e7461696e60448201526420636f646560d81b6064820152608490fd5b61014081019081106001600160401b0382111761072657604052565b604081019081106001600160401b0382111761072657604052565b90601f801991011681019081106001600160401b0382111761072657604052565b60405162461bcd60e51b815260206004820152602360248201527f414249206465636f64696e673a20696e76616c696420737472756374206f66666044820152621cd95d60ea1b6064820152608490fd5b51906001600160401b038216820361084957565b5190811515820361084957565b60405162461bcd60e51b815260206004820152602b60248201527f414249206465636f64696e673a20696e76616c69642063616c6c64617461206160448201526a1c9c985e481bd9999cd95d60aa1b6064820152608490fd5b81601f82011215610a3a5780516001600160401b0381116107265760405192610df4601f8301601f191660200185610cd5565b81845260208284010111610e1557610e129160208085019101610c03565b90565b60405162461bcd60e51b815260206004820152602760248201527f414249206465636f64696e673a20696e76616c69642062797465206172726179604482015266040d8cadccee8d60cb1b6064820152608490fd5b805115610710576020019056fea2646970667358221220f6b808ec093fe5c269880b774a8c81c4f1d5716cdd7d02056511546353976f5064736f6c63430008180033";

type AttesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attester__factory extends ContractFactory {
  constructor(...args: AttesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _spContractAddress: AddressLike,
    _schemaId: BigNumberish,
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _spContractAddress,
      _schemaId,
      _token,
      overrides || {}
    );
  }
  override deploy(
    _spContractAddress: AddressLike,
    _schemaId: BigNumberish,
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _spContractAddress,
      _schemaId,
      _token,
      overrides || {}
    ) as Promise<
      Attester & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Attester__factory {
    return super.connect(runner) as Attester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttesterInterface {
    return new Interface(_abi) as AttesterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Attester {
    return new Contract(address, _abi, runner) as unknown as Attester;
  }
}
